"use client";

import React from "react";
import toast from "react-hot-toast";
import { signOut } from "next-auth/react";
import { FormProvider, useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { updateUserInfo } from "@/app/actions";
import type { User } from "@prisma/client";
import { registerFormSchema, RegisterFormSchemaType } from "@/schemas";
import { Container, FormInput, Title } from "@/components/shared";
import { Button } from "@/components/ui";

interface IProfileFormProps {
  data: User;
}

export const ProfileForm: React.FC<IProfileFormProps> = ({ data }) => {
  const form = useForm({
    resolver: zodResolver(registerFormSchema),
    defaultValues: {
      fullName: data.fullName,
      email: data.email,
      password: "",
      confirmPassword: ""
    }
  });

  const onSubmit = async (data: RegisterFormSchemaType) => {
    try {
      await updateUserInfo({
        email: data.email,
        fullName: data.fullName,
        password: data.password
      });

      toast.error("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã üìù", { icon: "‚úÖ" });
    } catch (error) {
      return toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", { icon: "‚ùå" });
    }
  };

  return (
    <Container className="my-10">
      <Title text="–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" size="md" className="font-bold" />

      <FormProvider {...form}>
        <form className="flex flex-col gap-5 w-96 mt-10" onSubmit={form.handleSubmit(onSubmit)}>
          <FormInput name="email" label="E-Mail" required />
          <FormInput name="fullName" label="–ü–æ–ª–Ω–æ–µ –∏–º—è" required />

          <FormInput type="password" name="password" label="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å" required />
          <FormInput type="password" name="confirmPassword" label="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å" required />

          <Button
            disabled={form.formState.isSubmitting}
            className="text-base mt-10"
            type="submit"
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>

          <Button
            onClick={() => signOut({ callbackUrl: "/" })}
            variant="secondary"
            disabled={form.formState.isSubmitting}
            className="text-base"
            type="button"
          >
            –í—ã–π—Ç–∏
          </Button>
        </form>
      </FormProvider>
    </Container>
  );
};
